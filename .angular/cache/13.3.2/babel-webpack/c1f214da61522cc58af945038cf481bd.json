{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { environment } from './../environments/environment';\nimport { mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./spotify-token.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let MusicDataService = /*#__PURE__*/(() => {\n  class MusicDataService {\n    //favouritesList: Array<any> = [];\n    constructor(spotifyToken, http) {\n      this.spotifyToken = spotifyToken;\n      this.http = http;\n    }\n\n    getNewReleases() {\n      return this.spotifyToken.getBearerToken().pipe(mergeMap(token => {\n        return this.http.get(\"https://api.spotify.com/v1/browse/new-releases\", {\n          headers: {\n            \"Authorization\": `Bearer ${token}`\n          }\n        });\n      }));\n    }\n\n    getArtistById(id) {\n      return this.spotifyToken.getBearerToken().pipe(mergeMap(token => {\n        return this.http.get(`https://api.spotify.com/v1/artists/${id}`, {\n          headers: {\n            \"Authorization\": `Bearer ${token}`\n          }\n        });\n      }));\n    }\n\n    getAlbumsByArtistId(id) {\n      return this.spotifyToken.getBearerToken().pipe(mergeMap(token => {\n        return this.http.get(`https://api.spotify.com/v1/artists/${id}/albums?include_groups=album,single&limit=50`, {\n          headers: {\n            \"Authorization\": `Bearer ${token}`\n          }\n        });\n      }));\n    }\n\n    getAlbumById(id) {\n      return this.spotifyToken.getBearerToken().pipe(mergeMap(token => {\n        return this.http.get(`https://api.spotify.com/v1/albums/${id}`, {\n          headers: {\n            \"Authorization\": `Bearer ${token}`\n          }\n        });\n      }));\n    }\n\n    searchArtists(searchString) {\n      return this.spotifyToken.getBearerToken().pipe(mergeMap(token => {\n        return this.http.get(`https://api.spotify.com/v1/search?q=${searchString}&type=artist&limit=50`, {\n          headers: {\n            \"Authorization\": `Bearer ${token}`\n          }\n        });\n      }));\n    }\n\n    addToFavourites(id) {\n      return this.http.put(`${environment.userAPIBase}/favourites/${id}`, {});\n    }\n\n    removeFromFavourites(id) {\n      return this.http.delete(`${environment.userAPIBase}/favourites/${id}`).pipe(mergeMap(favouritesArray => {\n        if (favouritesArray.length > 0) {\n          return this.spotifyToken.getBearerToken().pipe(mergeMap(token => {\n            return this.http.get(`https://api.spotify.com/v1/tracks?ids=${favouritesArray.join(',')}`, {\n              headers: {\n                \"Authorization\": `Bearer ${token}`\n              }\n            });\n          }));\n        } else {\n          return new Observable(o => o.next({\n            tracks: []\n          }));\n        }\n      }));\n    }\n\n    getFavourites() {\n      return this.http.get(`${environment.userAPIBase}/favourites/`).pipe(mergeMap(favouritesArray => {\n        if (favouritesArray.length > 0) {\n          return this.spotifyToken.getBearerToken().pipe(mergeMap(token => {\n            return this.http.get(`https://api.spotify.com/v1/tracks?ids=${favouritesArray.join(',')}`, {\n              headers: {\n                \"Authorization\": `Bearer ${token}`\n              }\n            });\n          }));\n        } else {\n          return new Observable(o => o.next({\n            tracks: []\n          }));\n        }\n      }));\n    }\n\n  }\n\n  MusicDataService.ɵfac = function MusicDataService_Factory(t) {\n    return new (t || MusicDataService)(i0.ɵɵinject(i1.SpotifyTokenService), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  MusicDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MusicDataService,\n    factory: MusicDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return MusicDataService;\n})();","map":null,"metadata":{},"sourceType":"module"}